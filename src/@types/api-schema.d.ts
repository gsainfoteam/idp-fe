/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get information about the service
     * @description 현재 서버의 기본적인 정보를 확인할 수 있습니다.
     */
    get: operations['AppController_info'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health check for the application
     * @description Check the health of the application
     */
    get: operations['HealthController_check'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get user
     * @description api for getting user
     */
    get: operations['UserController_getUser'];
    put?: never;
    /**
     * sign up
     * @description api for the sign up
     */
    post: operations['UserController_register'];
    /**
     * delete user
     * @description api for deleting user
     */
    delete: operations['UserController_deleteUser'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/consent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get user consent
     * @description api for getting user consent
     */
    get: operations['UserController_getUserConsent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * change password
     * @description api for changing password
     */
    patch: operations['UserController_changePassword'];
    trace?: never;
  };
  '/user/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * update profile
     * @description api for updating profile image. it will return updated profile presigned url. image format must be webp
     */
    patch: operations['UserController_updateProfile'];
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * login
     * @description 로그인을 수행합니다. 이때, refreshToken은 cookie로 전달됩니다.
     */
    post: operations['AuthController_login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** logout */
    delete: operations['AuthController_logout'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * refresh access token
     * @description 액세스 토큰을 갱신합니다. 이때, refreshToken은 cookie로 전달됩니다.
     */
    post: operations['AuthController_refresh'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/verify': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * verify certification code
     * @description verify the certification code. If the code is valid, return the jwt token
     */
    post: operations['VerifyController_verify'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/verify/email': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * send email certification code
     * @description send the email certification code to the email address. The code is valid for 5 minutes.
     */
    post: operations['VerifyController_sendEmailCertificationCode'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/client': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get client list
     * @description 유저가 멤버로 있는 client의 리스트를 알려준다.
     */
    get: operations['ClientController_getClientList'];
    put?: never;
    /**
     * Register client
     * @description 유저가 client를 등록한다.
     */
    post: operations['ClientController_registerClient'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/client/{clientId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get client
     * @description 유저가 멤버로 있는 client의 정보를 알려준다.
     */
    get: operations['ClientController_getClient'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update client
     * @description 유저가 client의 정보를 수정한다.
     */
    patch: operations['ClientController_updateClient'];
    trace?: never;
  };
  '/client/{clientId}/public': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Client's public information
     * @description 모든 유저가 확인할 수 있는 Client의 정보를 알려준다. IdP를 사용하는 유저라고 확인하기 위해서, Jwt토큰을 사용한다. 해당 유저가 소유한 Client를 찾기 위한 것은 아니므로, user의 권한을 확인하지 않는다.
     */
    get: operations['ClientController_getClientPublic'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/client/{clientId}/secret': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Reset client secret
     * @description 유저가 client의 secret을 재설정한다.
     */
    patch: operations['ClientController_resetClientSecret'];
    trace?: never;
  };
  '/oauth/certs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get the certs
     * @description get the public key to verify the jwt token. through this endpoint, the client can get the public key to verify the jwt token.
     */
    get: operations['OauthController_certs'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/oauth/consent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * consent to the client
     * @description make the user consent to the client. through this endpoint, the user can agree to use the client. if not agreed, the client cannot get the user information.
     */
    post: operations['OauthController_consent'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/oauth/authorize': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * authorize the client
     * @description authorize the client to get the code. through this endpoint, the user can authorize the client to get the code.
     */
    get: operations['OauthController_authorize'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/oauth/token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * get the token
     * @description get the token from the authorization code. through this endpoint, the client can get the token from the authorization code, refresh token. or client credential.
     */
    post: operations['OauthController_token'];
    /**
     * revoke the token
     * @description revoke the token from the client. through this endpoint, the client can revoke the token.
     */
    delete: operations['OauthController_revoke'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/oauth/userinfo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get the userinfo
     * @description get the user information from the token. through this endpoint, the client can get the user information from the token.
     */
    get: operations['OauthController_userinfo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/.well-known/openid-configuration': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['WellKnownController_discovery'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UserResDto: {
      /**
       * @description 사용자 이름
       * @example 홍길동
       */
      name: string;
      /**
       * @description 사용자 uuid
       * @example uuid
       */
      uuid: string;
      /**
       * @description 프로필 이미지 url
       * @example https://bucket.s3.ap-northeast-2.amazonaws.com/1626740269.webp
       */
      profile: Record<string, never>;
      /**
       * @description 사용자 이메일
       * @example johndoe@gm.gist.ac.kr
       */
      email: string;
      /**
       * @description 사용자 학번
       * @example 20180000
       */
      studentId: string;
      /**
       * @description 사용자 전화번호
       * @example 01012345678
       */
      phoneNumber: string;
      /**
       * Format: date-time
       * @description 가입일
       * @example 2021-07-20T14:31:09.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 최근 수정일
       * @example 2021-07-20T14:31:09.000Z
       */
      updatedAt: string;
    };
    UserConsentClientResDto: {
      /**
       * @description client 이름
       * @example client name
       */
      name: string;
      /**
       * @description client uuid
       * @example uuid
       */
      uuid: string;
      /**
       * @description client scope
       * @example [
       *       "scope1",
       *       "scope2"
       *     ]
       */
      scopes: string[];
      /**
       * @description optional scope
       * @example [
       *       "optionalScope1",
       *       "optionalScope2"
       *     ]
       */
      optionalScopes: string[];
    };
    UserConsentResDto: {
      /** @description client information */
      client: components['schemas']['UserConsentClientResDto'];
      /**
       * @description client Uuid
       * @example uuid
       */
      clientUuid: string;
      /**
       * @description consent scope
       * @example [
       *       "scope1",
       *       "scope2"
       *     ]
       */
      scopes: string[];
      /**
       * Format: date-time
       * @description the time when the consent was created
       * @example 2021-07-20T14:31:09.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description the time when the consent was updated
       * @example 2021-07-20T14:31:09.000Z
       */
      updatedAt: string;
    };
    UserConsentListResDto: {
      /**
       * @description consent list
       * @example [
       *       null
       *     ]
       */
      list: components['schemas']['UserConsentResDto'][];
    };
    RegisterDto: {
      /**
       * @description GIST 이메일
       * @example JohnDoe@gm.gist.ac.kr
       */
      email: string;
      /**
       * @description 비밀번호
       * @example password1234
       */
      password: string;
      /**
       * @description 이름
       * @example John Doe
       */
      name: string;
      /**
       * @description 학번
       * @example 20180000
       */
      studentId: string;
      /**
       * @description 전화번호
       * @example 01012345678
       */
      phoneNumber: string;
      /**
       * @description 이메일 인증 jwt 토큰
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp9.eyJlbWFpbCI6ImpvaG5AZ21haWwuY29tIiwiaWF0IjoxNjI2NzQwMjY5LCJleHAiOjE2MjY3NDAyNzZ9.4RZq0Xq2vHf6VQ5o4GtG6tKv4oL9a8kF8y0JW7w5ZlY
       */
      verificationJwtToken: string;
    };
    ChangePasswordDto: {
      /**
       * @description GIST 이메일
       * @example JohnDoe@gm.gist.ac.kr
       */
      email: string;
      /**
       * @description 비밀번호
       * @example password1234
       */
      password: string;
      /**
       * @description 이메일 인증 jwt 토큰
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp9.eyJlbWFpbCI6ImpvaG5AZ21haWwuY29tIiwiaWF0IjoxNjI2NzQwMjY5LCJleHAiOjE2MjY3NDAyNzZ9.4RZq0Xq2vHf6VQ5o4GtG6tKv4oL9a8kF8y0JW7w5ZlY
       */
      verificationJwtToken: string;
    };
    UpdateUserProfileResDto: {
      /**
       * @description 프로필 이미지 presigned url
       * @example https://bucket.s3.ap-northeast-2.amazonaws.com/1626740269/profile.webp
       */
      presignedUrl: string;
    };
    DeleteUserReqDto: {
      /**
       * @description 비밀번호
       * @example password
       */
      password: string;
    };
    LoginDto: {
      /**
       * @description 유저의 이메일 주소
       * @example JohbDoe@gm.gist.ac.kr
       */
      email: string;
      /**
       * @description 유저의 비밀번호
       * @example password1234
       */
      password: string;
    };
    LoginResDto: {
      /**
       * @description 액세스 토큰
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpX9.eyJzdWIiOiJqb2huZG9lQGdtLmdpc3QuYWMua3IiLCJpYXQiOjE2MzIwNzIwMzYsImV4cCI6MTYzMjA3MjA5Nn0.
       */
      accessToken: string;
    };
    VerifyCodeDto: {
      /**
       * @description GIST 이메일 혹은 다른 인증 대상의 대푯값
       * @example JohnDoe@gm.gist.ac.kr
       */
      subject: string;
      /**
       * @description 인증 코드
       * @example verification-code
       */
      code: string;
      /**
       * @description 인증 타입
       * @example email
       * @enum {string}
       */
      hint: 'email';
    };
    VerificationJwtResDto: {
      /**
       * @description jwt 토큰
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV...
       */
      verificationJwtToken: string;
    };
    SendEmailCodeDto: {
      /**
       * @description GIST 이메일
       * @example JohnDoe@gm.gist.ac.kr
       */
      email: string;
    };
    ClientResDto: {
      /**
       * @description The UUID of the client
       * @example d290f1ee-6c54-4b01-90e6-d701748f0851
       */
      clientId: string;
      /**
       * @description The name of the client
       * @example client name
       */
      name: string;
      /**
       * @description The urls of the client
       * @example [
       *       "https://example.com"
       *     ]
       */
      urls: string[];
      /**
       * Format: date-time
       * @description The date the client was created
       * @example 2021-07-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date the client was last updated
       * @example 2021-07-01T00:00:00.000Z
       */
      updatedAt: string;
      /**
       * @description the scope which need to use the client's service
       * @example [
       *       "profile",
       *       "email"
       *     ]
       */
      scopes: string[];
      /**
       * @description the scope whether need or not in the client's service
       * @example [
       *       "student_id"
       *     ]
       */
      optionalScopes: string[];
      /**
       * @description whether the client has authority to use id token or not
       * @example true
       */
      idTokenAllowed: boolean;
    };
    ClientPublicResDto: {
      /**
       * @description The UUID of the client
       * @example d290f1ee-6c54-4b01-90e6-d701748f0851
       */
      clientId: string;
      /**
       * @description The name of the client
       * @example groups
       */
      name: string;
      /**
       * Format: date-time
       * @description The date the client was created
       * @example 2021-07-01T00:00:00.000Z
       */
      createdAt: string;
      /**
       * @description The scope which need to use the client's service
       * @example [
       *       "profile",
       *       "email"
       *     ]
       */
      scopes: string[];
      /**
       * @description The scope whether need or not in the client's service
       * @example [
       *       "student_id"
       *     ]
       */
      optionalScopes: string[];
    };
    CreateClientDto: {
      /**
       * @description The name of the client
       * @example client-1
       */
      name: string;
      /**
       * @description The urls of the client
       * @example [
       *       "http://localhost:3000"
       *     ]
       */
      urls: string[];
    };
    ClientCredentialResDto: {
      /**
       * @description Client id
       * @example d290f1ee-6c54-4b01-90e6-d701748f0851
       */
      clientId: string;
      /**
       * @description Client Secret
       * @example client-secret
       */
      client_secret: string;
    };
    UpdateClientDto: {
      /**
       * @description The name of the client
       * @example client-1
       */
      name: string;
      /**
       * @description The urls of the client
       * @example [
       *       "http://localhost:3000"
       *     ]
       */
      urls: string[];
      /**
       * @description The scopes which the client uses
       * @example [
       *       "email"
       *     ]
       */
      scopes: string[];
      /**
       * @description The scopes which the client might uses
       * @example [
       *       "student_id"
       *     ]
       */
      optionalScopes: string[];
      /**
       * @description whether using id token or not
       * @example true
       */
      idTokenAllowed: boolean;
    };
    ConsentReqDto: {
      /** @description scope that the user agrees to use */
      scope: string;
      /** @description id of the client */
      client_id: string;
    };
    TokenReqDto: {
      /** @description grant type of the client, only support "authorization_code", ""client_credentials", "refresh_token" */
      grant_type: Record<string, never>;
      /** @description client_id of the client */
      client_id?: string;
      /** @description client_secret of the client */
      client_secret?: string;
      /** @description code of the client */
      code?: string;
      /** @description code_verifier of the client, this is required when using PKCE, you should make it when you provide code_challenge */
      code_verifier?: string;
      /** @description refresh_token of the client */
      refresh_token?: string;
      /** @description scope of the client */
      scope: string[];
    };
    RevokeReqDto: {
      /** @description token to revoke */
      token: string;
      /** @description token type hint */
      token_type_hint: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_info: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': unknown;
        };
      };
      /** @description 서버에 문제가 생김 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  HealthController_check: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The Health Check is successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example ok */
            status?: string;
            /** @example {
             *       "database": {
             *         "status": "up"
             *       }
             *     } */
            info?: {
              [key: string]: {
                status: string;
              } & {
                [key: string]: unknown;
              };
            } | null;
            /** @example {} */
            error?: {
              [key: string]: {
                status: string;
              } & {
                [key: string]: unknown;
              };
            } | null;
            /** @example {
             *       "database": {
             *         "status": "up"
             *       }
             *     } */
            details?: {
              [key: string]: {
                status: string;
              } & {
                [key: string]: unknown;
              };
            };
          };
        };
      };
      /** @description The Health Check is not successful */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example error */
            status?: string;
            /** @example {
             *       "database": {
             *         "status": "up"
             *       }
             *     } */
            info?: {
              [key: string]: {
                status: string;
              } & {
                [key: string]: unknown;
              };
            } | null;
            /** @example {
             *       "redis": {
             *         "status": "down",
             *         "message": "Could not connect"
             *       }
             *     } */
            error?: {
              [key: string]: {
                status: string;
              } & {
                [key: string]: unknown;
              };
            } | null;
            /** @example {
             *       "database": {
             *         "status": "up"
             *       },
             *       "redis": {
             *         "status": "down",
             *         "message": "Could not connect"
             *       }
             *     } */
            details?: {
              [key: string]: {
                status: string;
              } & {
                [key: string]: unknown;
              };
            };
          };
        };
      };
    };
  };
  UserController_getUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserResDto'];
        };
      };
      /** @description token not valid */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterDto'];
      };
    };
    responses: {
      /** @description success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description certification token is not valid */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description user already exists */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_deleteUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteUserReqDto'];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description password is not valid */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_getUserConsent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserConsentListResDto'];
        };
      };
      /** @description token not valid */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_changePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto'];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description token not valid */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_updateProfile: {
    parameters: {
      query: {
        length: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UpdateUserProfileResDto'];
        };
      };
      /** @description token not valid */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto'];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResDto'];
        };
      };
      /** @description 로그인 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 에러 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 로그아웃 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 에러 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResDto'];
        };
      };
      /** @description 유효하지 않은 refreshToken */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 에러 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  VerifyController_verify: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['VerifyCodeDto'];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['VerificationJwtResDto'];
        };
      };
      /** @description certification code is not valid or timeout */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  VerifyController_sendEmailCertificationCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SendEmailCodeDto'];
      };
    };
    responses: {
      /** @description success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientController_getClientList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ClientResDto'][];
        };
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientController_registerClient: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateClientDto'];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ClientCredentialResDto'];
        };
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 이미 있는 데이터 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientController_getClient: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        clientId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ClientResDto'];
        };
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientController_updateClient: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        clientId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateClientDto'];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ClientResDto'];
        };
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 접근 불가 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientController_getClientPublic: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        clientId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ClientPublicResDto'];
        };
      };
      /** @description 잘못된 요청, clientId의 타입이 uuid가 아니면 발생할 수 있습니다. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ClientController_resetClientSecret: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        clientId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ClientCredentialResDto'];
        };
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 접근 불가 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 서버 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OauthController_certs: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OauthController_consent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['ConsentReqDto'];
        'application/json': components['schemas']['ConsentReqDto'];
      };
    };
    responses: {
      /** @description consent success */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OauthController_authorize: {
    parameters: {
      query: {
        /** @description response type of authorization since we use oauth2.1, only "code" is supported */
        response_type: string;
        /** @description client_id of the client */
        client_id: string;
        /** @description code_challenge, since we use PKCE, you should provide this pair */
        code_challenge: string;
        /** @description code_challenge_method, only support "plain" or "S256" for PKCE */
        code_challenge_method: 'plain' | 'S256';
        /** @description redirect_uri of the client */
        redirect_uri: string;
        /** @description scope of the client */
        scope: string[];
        /** @description state of the client */
        state: string;
        /** @description nonce of the client */
        nonce: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description it move to client uri with certain query parameters, ex) https://client.com/callback?code=123&state=123&iss=https://auth-server.com */
      308: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OauthController_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['TokenReqDto'];
        'application/json': components['schemas']['TokenReqDto'];
      };
    };
    responses: {
      /** @description invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OauthController_revoke: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeReqDto'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OauthController_userinfo: {
    parameters: {
      query: {
        sub: string;
      };
      header: {
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  WellKnownController_discovery: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
